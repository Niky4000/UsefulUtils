apply plugin: 'java'

sourceCompatibility = 1.8
targetCompatibility = 1.8
//sourceCompatibility = 10
//targetCompatibility = 10

repositories {
      mavenCentral()
//    jcenter()
//if https doesn't work    
//    jcenter {url "http://jcenter.bintray.com" }
}

dependencies {
//sync with versions included in Debian sid, if possible 
    compile group: 'commons-io', name: 'commons-io', version: '2.6'
    compile group: 'org.jsoup', name: 'jsoup', version: '1.10.2'
    compile group: 'com.google.guava', name: 'guava', version: '19.0'
//    compile group: 'net.sf.proguard', name: 'proguard-base', version: '6.0.1'
//    compile group: 'net.sf.proguard', name: 'proguard-gradle', version: '6.0.1'
    compile group: 'org.apache.xmlrpc', name: 'xmlrpc-common', version: '3.1.3'
    compile group: 'org.apache.xmlrpc', name: 'xmlrpc-client', version: '3.1.3'
//  compile fileTree(dir: 'lib', include: '*.jar')
    }

sourceSets {
    main {
    	 java {
	      srcDirs = ['src/main','opt']
	 }
    }
}

jar {
    manifest {
    	     attributes 'Main-Class': 'com.subgraph.orchid.TorClient'
    }		
}

//gradle clean fatJar
task fatJar(type: Jar) {
    baseName = rootProject.name
    manifest {
    	     attributes 'Main-Class': 'com.subgraph.orchid.TorClient'
    }		
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

//https://gist.github.com/JonasGroeger/7620911
def getGitSha() {
    def gitFolder = "$projectDir/.git/"
    def takeFromHash = 12
    /*
     * '.git/HEAD' contains either
     *      in case of detached head: the currently checked out commit hash
     *      otherwise: a reference to a file containing the current commit hash
     */
    def head = new File(gitFolder + "HEAD").text.split(":") // .git/HEAD
    def isCommit = head.length == 1 // e5a7c79edabbf7dd39888442df081b1c9d8e88fd
    // def isRef = head.length > 1     // ref: refs/heads/master

    if(isCommit) return head[0].trim().take(takeFromHash) // e5a7c79edabb

    def refHead = new File(gitFolder + head[1].trim()) // .git/refs/heads/master
    refHead.text.trim().take takeFromHash
}

def getReleaseTag() {
    def gitTagStdOut = new ByteArrayOutputStream()
    try{
        exec {
            commandLine "git", "describe", "--abbrev=0", "--tags"
            standardOutput = gitTagStdOut
        }
        return gitTagStdOut.toString().trim()
    } catch(all){
        return '0.0.0'
    }
}

version = getReleaseTag()

processResources {
  def replacer = { replaceMap ->
    return { line ->
      def newLine = line
      replaceMap.each { regex, replaceStr ->
        if (line =~ regex) {
          println "Replacing $line with $replaceStr"
          newLine = replaceStr
        }
      }
      return newLine
    }
  }

  def fileName = rootProject.name+"-"+version+".jar"
  def gitSha = getGitSha()
  def releaseDate = new Date()

  filesMatching('*.properties', { file ->
    switch(file.name) {
      case 'application.properties':
        //Modify app.version and revision
          file.filter(replacer([
            /file\.name=.*/ : "file.name=$fileName",
            /git\.sha=.*/ : "git.sha=$gitSha",
            /release\.date=.*/ : "release.date=$releaseDate"
          ]))
        break
    }
  })
}
